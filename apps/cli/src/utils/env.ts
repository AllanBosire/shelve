import type { EnvFile } from "../types/env.ts";
import { $api } from "./connection.ts";
import consola from "consola";
import fs from 'fs';

export function isEnvFileExist() {
  return fs.existsSync('.env');
}

export async function createEnvFile(variables: EnvFile = []) {
  let overwrite = false;
  let envFile = getEnvFile();
  if (envFile.length) {
    overwrite = await consola.prompt('Do you want to overwrite .env file? (y/n)', {
      type: 'confirm',
    });
  }
  if (!overwrite) {
    const newEnvFile = envFile.concat(variables.filter((item) => !envFile.find((env) => env.key === item.key)));
    const content = newEnvFile.map((item) => `${ item.key }=${ item.value }`).join('\n');
    fs.writeFileSync('.env', `# Generated by Shelve CLI\n${content}`);
    consola.success('File created successfully');
  } else {
    const content = variables.map((item) => `${ item.key }=${ item.value }`).join('\n');
    fs.writeFileSync('.env', `# Generated by Shelve CLI\n${content}`);
    consola.success('File created successfully');
  }
}

export function getEnvFile(): EnvFile {
  const isExist = fs.existsSync('.env');
  if (isExist) {
    const envFile = fs.readFileSync('.env', 'utf8');
    const json = envFile.split('\n').map((item) => {
      const [key, value] = item.split('=');
      return {key, value};
    });
    return json;
  } else {
    return [];
  }
}

export async function getProjectVariable(projectId: number, environment: string): Promise<EnvFile> {
  consola.start("Pulling...");
  return await $api<EnvFile>(`/variable/${ projectId }/${ environment }`);
}
